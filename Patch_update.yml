# Ansible playbook to perform patching on RHEL
#Can as per our requirement Nagesh 24/02/2021

- hosts: all
  become_user: root
  serial: 2


 tasks:
   # purpose of this task appliactions running or stopped
   - name: verify application/database are not running
     shell: if ps -eaf | egrep 'apche|http|db2sysc |grep -v grep > /dev/null then echo 'process_running';else echo 'process_not_running';fi
     ignore_errors: true
     register: app_process_check

   # This task is decision ,play will fail/quit . if application is running
   - name: Decision point to start patching
     fail: msg="{{inventory_hostname)) have running Application.Please stop application first.then attempt patching" 
     when: app_process_check.stdout == "process_running"

   # This task will upgrade/install the rmp's if application stoppped
   - name: upgrade all packages on server
     yum:
     name="kernel"
     state=latest
     when: app_process_check.stdout == 'process_not_running' and ansible_distribution == 'Red Hat Enterprise Linux'
 
   # This task is to check kernel update happened and system needs reboot or not
   - name: check if reboot required after kernal updates
     shell: KERNAL_NEW=$(rpm -q -last_kernel |head -1 | awk '{print $1}' | sed s/kernel-//'); KERNAL_NOW=$(uname-r); if [[ $KERNEL_NEW != $KERNEL_NOW]]; then echo "reboot_needed"; else echo "rebbot_not_needed"; fi
     ignore_errors: true
     register: reboot_required

   # This task is restart the system
   - name: system restart
     command: shutdown -r +1 "Rebooting system after patching"
     sync: 0
     poll: 0
     when: reboot_required.stdout == "reboot_needed"
     register: reboot_started
     ignore_error: true

   # This task is wait for 5 min for system to come up after the reboot
   - name: pause for 300 secs
     pause:
     minutes: 5

   # THis task is confirm,system up and responding to ssh
   - name: check if system is responding to ssh
     module: wait_for 
     host={{ inventory_host }} 
     port=22
     delay=15
     timeout=300
     state: started
     when: reboot_started|chnaged




       
 
